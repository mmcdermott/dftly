%import common.WS
%ignore WS
STRING: /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"/

PLUS: "+"
MINUS: "-"
TIMES: "*"
DIV: "/"
AT: "@"
EQ: "=="
NE: "!="
GE: ">="
LE: "<="
GT: ">"
LT: "<"
AS: /as/i
IF: /if/i
ELSE: /else/i
AND_SYM: "&&"
OR_SYM: "||"
NOT_SYM: "!"
NOT_MATCH.2: /not\s+match/i
AND.2: "and"i
OR.2: "or"i
NOT.2: "not"i
NAME: /[A-Za-z_][A-Za-z0-9_]*/
IN: /in/i
NUMBER: /\d+(?:\.\d+)?/
REGEX_LITERAL: /\/([^\/\\\n]|\\.)*\//
LPAR: "("
RPAR: ")"
EXTRACT.2: /extract/i
GROUP.2: /group/i
OF.2: /of/i
FROM.2: /from/i
MATCH.2: /match/i
AGAINST.2: /against/i

?start: expr

?expr: comparison

?comparison: additive (NE|EQ|GE|LE|GT|LT) additive   -> binary_expr
           | additive

?additive: additive (PLUS|MINUS) multiplicative   -> binary_expr
         | multiplicative

?multiplicative: multiplicative (TIMES|DIV) unary  -> binary_expr
               | unary

?unary: primary

?primary: regex_extract_stmt
       | call_expr
       | (AT)NAME -> column
       | NUMBER
       | STRING
       | group

?group: "(" expr ")"

group_clause: GROUP expr -> group_clause

regex_pattern: REGEX_LITERAL
             | STRING

regex_extract_simple: regex_pattern FROM expr -> regex_extract_simple
regex_extract_grouped: group_clause OF regex_pattern FROM expr -> regex_extract_grouped

?regex_extract_stmt: EXTRACT regex_extract_grouped -> regex_extract_stmt
                    | EXTRACT regex_extract_simple -> regex_extract_stmt

?call_expr: NAME "(" [args] ")"   -> func
?args: expr ("," expr)*
